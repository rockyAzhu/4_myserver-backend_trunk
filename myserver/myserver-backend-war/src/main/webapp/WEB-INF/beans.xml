<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                             xmlns:context="http://www.springframework.org/schema/context"
                                             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
                                             default-lazy-init="true">

  <!-- This scan is only used to find the services component. -->
  <context:component-scan base-package="com.newsoftvalley.myserver.rest.services" />

  <bean id="restliRequestHandler"
        class="com.linkedin.restli.server.spring.RestliHttpRequestHandler">
    <constructor-arg>
      <bean class="com.linkedin.restli.server.RestLiConfig">
        <property name="resourcePackageNames"
                  value="com.newsoftvalley.myserver.rest.resources" />
      </bean>
    </constructor-arg>
    <constructor-arg ref="injectResourceFactory" />
    <constructor-arg ref="filterChain" />
  </bean>

  <bean id="injectResourceFactory"
        class="com.linkedin.restli.server.spring.SpringInjectResourceFactory" />
  <bean id="filterChain"
        class="com.linkedin.r2.filter.FilterChains"
        factory-method="createRestChain">
    <constructor-arg>
      <list>
        <ref bean="loggingFilter"/>
        <ref bean="compressionFilter"/>
      </list>
    </constructor-arg>
  </bean>
  <bean id="loggingFilter"
        class="com.linkedin.r2.filter.logging.SimpleLoggingFilter" />
  <bean id="compressionFilter"
        class="com.linkedin.r2.filter.compression.ServerCompressionFilter" >
    <constructor-arg value="snappy" />
  </bean>

</beans>
